name: Build and Publish to PyPI

# triggered manually only
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    if: github.actor == "alberthli" || github.actor == "slecleach" || github.actor == "pculbertson"
    strategy:
      fail-fast: false  # run all jobs even if one fails
      matrix:
        # cibw_arch is intentionally not set for non-macOS jobs to avoid accidental misuse later
        include:
            # Linux (x86_64)
          - os: ubuntu-24.04
            py: "3.10"
          - os: ubuntu-24.04
            py: "3.11"
          - os: ubuntu-24.04
            py: "3.12"
          - os: ubuntu-24.04
            py: "3.13"

          # Windows (AMD64)
          - os: windows-latest
            py: "3.10"
          - os: windows-latest
            py: "3.11"
          - os: windows-latest
            py: "3.12"
          - os: windows-latest
            py: "3.13"

          # macOS ARM (native)
          - os: macos-14
            py: "3.10"
            cibw_arch: "arm64"
          - os: macos-14
            py: "3.11"
            cibw_arch: "arm64"
          - os: macos-14
            py: "3.12"
            cibw_arch: "arm64"
          - os: macos-14
            py: "3.13"
            cibw_arch: "arm64"

          # macOS Intel (native)
          - os: macos-13
            py: "3.10"
            cibw_arch: "x86_64"
          - os: macos-13
            py: "3.11"
            cibw_arch: "x86_64"
          - os: macos-13
            py: "3.12"
            cibw_arch: "x86_64"
          - os: macos-13
            py: "3.13"
            cibw_arch: "x86_64"

    steps:
      # initial setup
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          cache: pip
      - name: Install build tools
        run: |  # explicit upgrade first so new wheel lands in the cache
          python -m pip install --upgrade pip
          python -m pip install --upgrade build cibuildwheel

      # handle macos separately because passing an empty string can leak to non-mac jobs
      - name: Set macOS arch env
        if: startsWith(matrix.os, 'macos')
        run: echo "CIBW_ARCHS_MACOS=${{ matrix.cibw_arch }}" >> "$GITHUB_ENV"

      # cache cibuildwheel
      - name: Cache cibuildwheel (Unix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/cibuildwheel
          key: cibw-${{ runner.os }}-${{ matrix.py }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            cibw-${{ runner.os }}-${{ matrix.py }}-
            cibw-${{ runner.os }}-
      - name: Cache cibuildwheel (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\cibuildwheel\Cache
          key: cibw-${{ runner.os }}-${{ matrix.py }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            cibw-${{ runner.os }}-${{ matrix.py }}-
            cibw-${{ runner.os }}-

      # build wheels and source distribution
      - name: Build wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp${{ replace(matrix.py, '.', '') }}-*"
          CIBW_SKIP: "*-manylinux_i686 *-musllinux*"
          CIBW_TEST_EXTRAS: "test"
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "pytest -q --import-mode=importlib"
      - name: Build source distribution
        if: matrix.os == "ubuntu-24.04" && matrix.py == "3.13"  # avoids duplicate sdist builds
        run: |
          python -m build --sdist -o dist

      # upload wheels and sdist
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.py }}-${{ github.run_id }}
          path: wheelhouse/*.whl
          retention-days: 7
      - name: Upload sdist
        if: matrix.os == "ubuntu-24.04" && matrix.py == "3.13"
        uses: actions/upload-artifact@v4
        with:
          name: sdist-${{ github.run_id }}
          path: dist/*.tar.gz
          retention-days: 7

  publish:
    needs: build-and-publish
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: |
            wheels-*
            sdist-*
          merge-multiple: true
          path: wheelhouse

      # verify the metadata before publishing
      - name: Install twine
        run: pip install --upgrade twine
      - name: Verify metadata (twine)
        shell: bash
        run: |
          shopt -s nullglob
          files=(wheelhouse/*.whl wheelhouse/*.tar.gz)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No files found to check"
            exit 1
          fi
          twine check "${files[@]}"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages_dir: wheelhouse
          skip-existing: true
          provenance: true
