name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04]
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml

      - name: Install package (+dev extras)
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Locate judo.MODEL_PATH
        id: model
        run: |
          MODEL_DIR=$(python - <<'PY'
          import importlib.metadata as imd, pathlib, site, sys

          try:
              dist = imd.distribution("judo-rai")
          except imd.PackageNotFoundError:
              sys.exit("judo not found")

          # path to site-packages (â€¦/lib/pythonX.Y/site-packages)
          site_pkg_root = pathlib.Path(dist.locate_file("")).resolve()

          # handle both src layout and wheel layout
          candidate = site_pkg_root / "judo" / "models"
          if candidate.exists():
              print(str(candidate))
          else:
              # fallback: search all site-packages for safety
              for sp in site.getsitepackages():
                  c = pathlib.Path(sp) / "judo" / "models"
                  if c.exists():
                      print(str(c))
                      break
          PY
          )
          echo "MODEL_DIR=$MODEL_DIR" >> "$GITHUB_ENV"
          echo "model_dir=$MODEL_DIR" >> "$GITHUB_OUTPUT"

      - name: Download meshes
        env:
          MODEL_DIR: ${{ steps.model.outputs.model_dir }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          python - <<'PY'
          import os
          from judo.utils.assets import download_and_extract_meshes
          download_and_extract_meshes(extract_root=os.environ["MODEL_DIR"])
          PY

      - name: Test with pytest
        run: pytest -rsx
