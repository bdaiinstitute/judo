name: Build Wheels

on:
  push:
    branches:
      - main
      - spot_cpp
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]  # macos-13 is Intel, macos-14 is Apple Silicon

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: python -m pip install tomli tomli-w

      - name: Prepare build configuration
        run: |
          # Merge pyproject.toml with pyproject-build.toml for building
          python -c "
          import tomli
          import tomli_w

          # Read both files
          with open('pyproject.toml', 'rb') as f:
              main = tomli.load(f)
          with open('pyproject-build.toml', 'rb') as f:
              build = tomli.load(f)

          # Merge: use build-system and tool.scikit-build from build config
          main['build-system'] = build['build-system']
          main['tool']['scikit-build'] = build['tool']['scikit-build']

          # Write merged config
          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(main, f)
          "
        shell: bash

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.21.3

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build for Python 3.10, 3.11, 3.12, 3.13
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"

          # Skip 32-bit builds and musllinux
          CIBW_SKIP: "*-win32 *-manylinux_i686 *-musllinux_*"

          # Install build dependencies before building the wheel
          # These are needed at wheel build time
          CIBW_BEFORE_BUILD: pip install scikit-build-core[pyproject] pybind11 numpy mujoco onnxruntime

          # Linux: Install system dependencies
          CIBW_BEFORE_ALL_LINUX: >
            yum install -y wget &&
            wget https://github.com/eigenteam/eigen-git-mirror/archive/3.4.0.tar.gz &&
            tar -xzf 3.4.0.tar.gz &&
            cd eigen-git-mirror-3.4.0 &&
            mkdir build && cd build &&
            cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local &&
            make install

          # macOS: Install Homebrew dependencies
          CIBW_BEFORE_ALL_MACOS: >
            brew install libomp eigen

          # Set OpenMP and Eigen paths for macOS
          CIBW_ENVIRONMENT_MACOS: >
            OpenMP_ROOT=$(brew --prefix libomp)
            Eigen3_DIR=$(brew --prefix eigen)/share/eigen3/cmake

          # Install Python runtime dependencies before testing
          CIBW_BEFORE_TEST: pip install mujoco numpy scipy

          # Run tests
          CIBW_TEST_COMMAND: "python -c 'import judo; import judo_cpp; print(judo.__version__)'"

          # Repair wheels (embed dependencies)
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=/usr/local/lib:$DYLD_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            auditwheel repair -w {dest_dir} {wheel}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
